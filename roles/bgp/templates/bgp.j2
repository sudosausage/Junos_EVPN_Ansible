{% set device = hostvars[inventory_hostname] %}
replace: routing-options {
    router-id {{ device.router_id }};
    autonomous-system {{ device.asn }};
    forwarding-table {
        export LB;
        ecmp-fast-reroute;
    }
}
protocols {
    replace: bgp {
        group eBGP_Underlay {
            type external;
            mtu-discovery;
            export bgp-underlay-out;
            local-as {{ device.asn }};
            bfd-liveness-detection {
                minimum-interval 300;
                multiplier 3;
                session-mode automatic;
            }
            multipath multiple-as;
{% for bgp in device.bgp_underlay %}
            neighbor {{ bgp.remote_address }} {
                peer-as {{ bgp.remote_asn }};
                description "{{ bgp.description }}"
                local-address {{ bgp.local_address }};
            }
{% endfor %}
        }
        group eBGP-Overlay {
            type external;
            multihop {
                ttl 2;
{% if device.role is defined and "Spine" in device.role %}
                no-nexthop-change;
{% endif %}
            }
            local-as {{ device.asn }};
            local-address {{ device.router_id }};
            family evpn {
                signaling;
            }
            bfd-liveness-detection {
                minimum-interval 300;
                multiplier 3;
                session-mode automatic;
            }
            multipath multiple-as;
{% for bgp in device.bgp_overlay %}
            neighbor {{ bgp.remote_address }} {
                peer-as {{ bgp.remote_asn }};
                description "{{ bgp.description }}"
            }
{% endfor %}
        }
    }
}
policy-options {
    policy-statement LB {
        then {
            load-balance per-packet;
        }
    }
    policy-statement bgp-underlay-out {
        term loopback {
            from {
                protocol [ direct bgp ];
                route-filter 10.255.254.0/24 prefix-length-range /32-/32;
            }
            then {
                community add Underlay;
                accept;
            }
        }
        term as-path {
            from {
                as-path asPathLength2;
                community Underlay;
            }
            then reject;
        }
        then reject;
    }
    community Underlay members target:999:1;
    as-path asPathLength2 ".{2,}";
}
